package e_OOP;

public class OOPBasic {
	public static void main(String[] args) { //String형 배열 1개를 변수로 입력받지만 반환값은 없는 main 메소드
		/*
		1. OOP : Object Oriented Programming -> 객체지향 프로그래밍
		  - 기존의 프로그래밍 언어에 몇천가지 새로운 규칙을 추가한 보다 발전된 언어이다.
		
		2. 객체지향 프로그래밍의 장점
		  - 코드의 재사용성이 높다. : 어디에 들어가도 호환될 수 있게 만들어야 함
		  - 코드의 관리가 용이하다. 
		  - 신뢰성이 높은 프로그래밍이 가능하다.
		  
		3. 클래스 (된장찌개 레시피)
		  - 객체 (된찌) 를 정의해 놓은 것.
		  - 설계도
		  
		  클래스		객체
		 Tv설계도		TV
		 붕어빵틀		붕어빵
		 
		4. 객체의 구성요소
		  - 속성
		  	: 멤버변수
		  	: 전원, 볼륨, 색상, 채널...
		  - 기능
		    : 메서드	(,행위, function..)
		  	: 켜기, 끄기, 볼륨올리기, 채널 올리기...
		  	
		5. 인스턴스란?
		  - 인스턴스화: 클래스로부터 객체를 만드는 과정
		  - Tv클래스의 인스턴스 : Tv클래스로부터 만들어진 객체 (인스턴스 ≒ 객체)
		  
		  - 인스턴스를 생성하는 방법
		    : 클래스명 변수명; -> 참조변수를 선언
		    : 변수명 = new 클래스명(); -> 해당 클래스의 인스턴스를 생성 후 인스턴스의 주소를 변수에 저장
		    Tv t = new Tv();
		      
		6. 선언위치에 따른 변수의 종류
		  - 지역변수
		  	: 메서드 내에 선언된다.
		  	: 메서드 종료 시 같이 소멸된다.
		  	
		  - 클래스변수
		  	: 클래스의 영역에 선언된다
		  	: 클래스가 Method Area로 로드 될 때 같이 로드된다.
		  	: 한 클래스의 모든 인스턴스들이 동일한 공통값을 가져야할 때 사용(카드의 width, height)
		  	: 인스턴스변수 앞에 static만 붙이면 된다.
		  
		  - 인스턴스변수
		  	: 클래스의 영역에 선언된다.
		  	: 클래스의 인스턴스가 생성될 때 heap영역에 생성된다.
		  	: 인스턴스마다 독립적인 저장공간을 가진다. (각각 다른 값을 가진다) (카드의 그림, 숫자)
		  	: 인스턴스마다 고유한 값을 가져야 하는 경우 해당 변수는 인스턴스 변수로 선언해야한다.
		  	
		  	: 원카드 한벌 로 카드클래스 만들어봅시다
		  	: 공통: 카드의 width, height->클래스변수
		  	: 고유한값: 그림, 숫자		->인스턴스변수
		  
		  
		7. 메서드 
		  - 어떠한 작업을 수행하기 위한 명령문의 집합
		  - 주로 어떤 값을 입력받아서 수행 후 그 결과를 돌려준다.
		  - 입력받는 값이 없을 수도 결과를 반환하지 않을수도 있다.
		  - 반복적으로 수행되는 코드를 줄이기 위해서 사용한다.
		  - 작성방법
		        반환타입 메서드명(변수타입 변수명,...){	//매개변수
		    	수행될 문장
		    	return 반환값;
		    }
		    
		    int add(int a, int b){	//1.메소드명앞에 반환타입 2.변수명은 의미없고, 변수타입과 갯수가 중요함
		    	int rusult = a + b;	//수행될 문장
		    	return result;
		    } //받고, 처리하고, 반환값 반환, 메소드명의 반환타입 결정됨
		    
		    
		8. return문
		  - 메서드가 정상적으로 종료되는 경우
		    : 메서드의 마지막 문장까지 실행된 경우
		    : return문을 만났을 때 (switch-case문과 반복문의 break같은 아이) ★메소드 중괄호 닫힐때까지 안가고 반환값 돌려주고 바로 종료됨
		    
		  - 반환값이 있는 경우
		    : return 반환값; => 반환값과 반환타입의 타입은 일치해야 한다
		    
		  - 반환값이 없는 경우
		    : return;
		    : 반환타입이 void가 되어야한다. 
		    : 생략가능 (중간에 return하는건 써줘야됨, 마지막에만 생략 가능)
		
		
		9. 메서드 호출
		  - 클래스명.메서드명();
		  - int 변수명 = 클래스명.add(3,5); //
		
		10. JVM메모리구조
		  - Method Area
		    : 클래스가 로드되며 클래스변수, 클래스메서드가 같이 생성된다.
		  - Call Stack
		    : 메서드가 호출되었을 때 실행되는 영역
		  - Heap Area
		    : 인스턴스가 생성되며 인스턴스변수, 인스턴스메서드가 같이 생성된다.
		  
		11. 기본형 매개변수와 참조형 매개변수
		  - 메서드가 호출되었을 때 매개변수로 지정한 값(인자값)을 메서드의 매개변수에 "복사"하여 넘겨준다.
		  - 기본형 매개변수
		    : 단순히 값만을 복사해 준다.
		    : 변수의 값을 "읽기"만 할 수 있다.
		  - 참조형 매개변수
		    : 주소를 복사해 준다.
		    : 변수의 값을 "읽기 또는 변경"이 가능하+다
		  
		12. 재귀호출(Recursive Call)
		  - 메서드 내에서 자기자신 메서드를 다시 호출하는 것
		
		13. 메서드의 종류
		  - 클래스메서드
		    : 객체생성없이 '클래스명.메서드명()'
		    : 인스턴스 멤버와 관련없는 작업을 수행 (p.110)
		    : 클래스메서드 내에서는 인스턴트멤버를 사용할 수 없다.
		    : 메서드 생성시 그 메서드 내에서 인스턴스멤버를 사용하지 않고 있다면 클래스메서드로 만드는 것을 고려해야한다. 
		    	- 항상 클래스멤버들이 인스턴스멤버들보다 먼저 메모리에 올라간다
		    	- 클래스멤버가 로드된 시점에는 인스턴스 멤버들이 없다 (-> 있을수도, 없을수도 이런 말은 그냥 없단 얘기)
		    	- 클래스멤버는 인스턴스 멤버를 호출할 수 없다.
		  - 인스턴스메서드
		    : 인스턴스를 생성 후, '참조변수명.메서드명()'으로 호출
		    : 인스턴스멤버와 관련된 작업을 주로 수행한다.
		    : 클래스멤버와 관련된 작업을 수행할 수도 있다.
		    : 인스턴스메서드 내에서는 '모든 멤버'를 호출할 수 있다.
		    
		14. 메서드 오버로딩
		  - 클래스 내에서 이름이 같은 이름의 메서드를 여러개 정의할 수 있는 것
		  * https://docs.oracle.com/javase/7/docs/api/ -> doc주석으로 뽑아낼 수 있다?
		  - println(): 대표적인 예
		  - 조건
		    : 메서드의 명이 같아야 한다.
		    : 매개변수의 갯수 또는 타입이 달라야 한다.
		    : a(), a(int), a(long)
		  	: 반환타입은 상관이 없다. (호출을 생각해보면 됨)
		  - 장점
		    : 메서드의 이름으로만 구분이 된다면 메서드명이 다 달라야 한다.
		    : 같은 역할을 하는 것인데 메서드의 명이 다르면 기억하기가 어렵다.
		    : 메서드의 이름을 짓는데 고민을 덜 수 있다.
		    
		15. 생성자
		  - 인스턴스가 생성될때 호출되는 인스턴스 초기화 메서드
		  - 인스턴스변수를 초기화할 목적으로 사용된다.
		  - 특징
		    : 메서드처럼 클래스내에 선언된다.
		    : 리턴값이 없다
		    : 반환타입이 void이어야 하지만 생략한다. (모든 생성자가 void이기때문)
		    : 생성자의 이름은 클래스명과 동일해야 한다
		  
		  - 정의방법
		    : 기본 생성자 - 컴파일러가 자동으로 생성
		    	클래스명(){
		    	
		    	}
		    : 매개변수가 있는 생성자
		    	클래스명(변수타입 변수명,...){
		    	
		    	}
		  
		  class MyAdd{
		  	MyAdd(){		// 컴파일러가 자동으로 생성해주는 기본생성자
		  	
		  	}
		  	
		  	MyAdd(int a){	// <- 이게있으면 기본생성자 자동으로 만들어주지 않음
		  	
		  	}
		  }
		  - 명칭은 클래스명과 동일, void면 자동으로 컴파일러가 생성해서 넣어줌
		  
		 
		16. 변수의 초기화
		  - 변수를 선언하고 처음으로 값을 저장하는 것.
		  - 명시적 초기화
		    : int a = 10;
		  - 생성자를 이용한 초기화		  
		  - 초기화블럭을 이용한 초기화:
			: 어떤 값 하나를 만들기 위해 매우 많은 식이 필요할 때 (ex물리학..)
			: 클래스 초기화블럭, 인스턴스 초기화블럭
	
	
	
	
	
	
	
	
	
	
	
		*/
		
		
		
		
		
		
	}//main
	
}
